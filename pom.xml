<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tech.picnic.reactive-support</groupId>
    <artifactId>reactive-support</artifactId>
    <version>0.0.2-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>Picnic :: Reactive Support</name>
    <description>Reactive programming support library by Picnic.</description>
    <url>https://github.com/PicnicSupermarket/reactive-support</url>
    <inceptionYear>2018</inceptionYear>
    <organization>
        <name>Picnic Technologies BV</name>
        <url>http://picnic.tech</url>
    </organization>
    <licenses>
        <license>
            <name>MIT License</name>
            <url>https://opensource.org/licenses/mit-license.php</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Philip Leonard</name>
            <email>philip.leonard@teampicnic.com</email>
            <organization>Picnic Technologies BV</organization>
            <timezone>Europe/Amsterdam</timezone>
        </developer>
        <developer>
            <name>Sjoerd Cranen</name>
            <email>sjoerd.cranen@teampicnic.com</email>
            <organization>Picnic Technologies BV</organization>
            <timezone>Europe/Amsterdam</timezone>
        </developer>
        <developer>
            <name>Stephan Schroevers</name>
            <email>stephan.schroevers@teampicnic.com</email>
            <organization>Picnic Technologies BV</organization>
            <timezone>Europe/Amsterdam</timezone>
        </developer>
    </developers>

    <modules>
        <module>rxjava-support</module>
    </modules>

    <scm>
        <developerConnection>scm:git:git@github.com:PicnicSupermarket/reactive-support.git</developerConnection>
        <url>https://github.com/PicnicSupermarket/reactive-support</url>
        <tag>HEAD</tag>
    </scm>
    <issueManagement>
        <system>Github</system>
        <url>https://github.com/PicnicSupermarket/reactive-support/issues</url>
    </issueManagement>
    <ciManagement>
        <system>Travis CI</system>
        <url>https://travis-ci.org/PicnicSupermarket/reactive-support</url>
    </ciManagement>
    <distributionManagement>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
    </distributionManagement>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <version.checkstyle>8.10</version.checkstyle>
        <version.error-prone>2.3.1</version.error-prone>
        <version.extra-enforcer-rules>1.0-beta-7</version.extra-enforcer-rules>
        <version.guava-beta-checker>1.0</version.guava-beta-checker>
        <version.javadoc>2.10.4</version.javadoc>
        <version.jdk>1.8</version.jdk>
        <version.maven>3.5.3</version.maven>
        <version.nullaway>0.4.4</version.nullaway>
        <version.plexus-compiler>2.8.4</version.plexus-compiler>
        <version.surefire>2.21.0</version.surefire>
        <!-- Our build system (Travis CI) provides a monotonically increasing
        build number. When building locally, this number is obviously absent.
        So we provide a default value. -->
        <build.number>LOCAL</build.number>
        <!-- Arguments to the JVMs forked by Surefire. The specification of
        this 'argLine' property instead of the definition of the 'argLine'
        configuration setting allows users or plugins to specify additional
        arguments. In particular, JaCoCo relies on this for the configuration
        of its Java agent. -->
        <argLine><!--
            The test JVMs are short-running. By disabling certain expensive JIT
            optimizations we actually speed up most tests. -->
            -XX:TieredStopAtLevel=1
            <!-- We cap memory usage. This is especially relevant on Travis CI,
            but locally this should also be more than enough. -->
            -Xmx512m
            <!-- This argument cannot be set through Surefire's
            'systemPropertyVariables' configuration setting. Setting the file
            encoding is necessary because forked unit test invocations
            otherwise use the environment's file encoding. -->
            -Dfile.encoding=${project.build.sourceEncoding}
            <!-- This argument *can* be set through Surefire's
            'systemPropertyVariables' configuration setting, but by placing it
            here it automatically also applies to the Failsafe plugin. On Unix
            systems we use a lower-quality source of randomness, so as to avoid
            potential slowdown of tests relying on java.security.SecureRandom.
            Note that it is not fatal for the file to not exist, so this
            setting is Windows-compatible. The '/./' syntax is no accident; see
            https://bugs.openjdk.java.net/browse/JDK-6202721 for details. -->
            -Djava.security.egd=file:/dev/./urandom
            <!-- On Mac OS X, running in headless mode prevents the forked JVMs
            from showing up in the dock and capturing window focus. -->
            -Djava.awt.headless=true
        </argLine>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.fasterxml.jackson</groupId>
                <artifactId>jackson-bom</artifactId>
                <version>2.8.11</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.google.code.findbugs</groupId>
                <artifactId>jsr305</artifactId>
                <version>3.0.2</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>25.0-jre</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava-beta-checker</artifactId>
                <version>${version.guava-beta-checker}</version>
            </dependency>
            <dependency>
                <groupId>com.puppycrawl.tools</groupId>
                <artifactId>checkstyle</artifactId>
                <version>${version.checkstyle}</version>
            </dependency>
            <dependency>
                <groupId>com.uber.nullaway</groupId>
                <artifactId>nullaway</artifactId>
                <version>${version.nullaway}</version>
            </dependency>
            <dependency>
                <groupId>io.reactivex.rxjava2</groupId>
                <artifactId>rxjava</artifactId>
                <version>2.1.13</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>3.1.0</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>extra-enforcer-rules</artifactId>
                <version>${version.extra-enforcer-rules}</version>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>java-hamcrest</artifactId>
                <version>2.0.0.0</version>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>2.18.3</version>
            </dependency>
            <dependency>
                <groupId>org.reactivestreams</groupId>
                <artifactId>reactive-streams</artifactId>
                <version>1.0.2</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.25</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>1.7.25</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>4.3.16.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>6.14.3</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.coveo</groupId>
                    <artifactId>fmt-maven-plugin</artifactId>
                    <version>2.4.0</version>
                    <executions>
                        <execution>
                            <id>format-sources</id>
                            <phase>process-sources</phase>
                            <goals>
                                <goal>format</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>com.lewisd</groupId>
                    <artifactId>lint-maven-plugin</artifactId>
                    <version>0.0.11</version>
                    <executions>
                        <execution>
                            <id>validate-pom</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <failOnViolation>false</failOnViolation>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>de.thetaphi</groupId>
                    <artifactId>forbiddenapis</artifactId>
                    <version>2.5</version>
                    <executions>
                        <execution>
                            <id>detect-forbidden-api-usage</id>
                            <goals>
                                <goal>check</goal>
                                <goal>testCheck</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <bundledSignatures>
                            <bundledSignature>jdk-system-out</bundledSignature>
                        </bundledSignatures>
                        <!-- The plugin tries to load all supertypes of any
                        class it analyzes. Some of those types may be absent
                        from the compilation classpath, because the module that
                        contains them has the `runtime` or `test` scope. When
                        this happens, we don't want to fail the build. (The
                        alternative is to declare all those dependencies
                        `provided`, but we'd rather not do that.) -->
                        <failOnMissingClasses>false</failOnMissingClasses>
                        <failOnViolation>false</failOnViolation>
                        <targetVersion>${version.jdk}</targetVersion>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>io.takari</groupId>
                    <artifactId>maven</artifactId>
                    <version>0.6.0</version>
                    <configuration>
                        <maven>${version.maven}</maven>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>3.0.0</version>
                    <executions>
                        <execution>
                            <id>run-checkstyle</id>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <checkstyleRules>
                            <!-- We only enable rules that are not enforced by
                            error-prone or automatically corrected through
                            application of google-java-format. -->
                            <module name="Checker">
                                <module name="UniqueProperties" />
                                <module name="TreeWalker">
                                    <module name="AnnotationUseStyle">
                                        <!-- XXX: Right now this check doesn't
                                        completely enforce the desired style.
                                        See https://github.com/checkstyle/checkstyle/issues/4972;
                                        we're looking for the proposed `compact
                                        = ALWAYS` and `singleArrayCurlies =
                                        NEVER` style. -->
                                    </module>
                                    <module name="DeclarationOrder">
                                        <!-- We don't enforce sorting fields by
                                        their visibility modifier, for two
                                        reasons:
                                        - During (class) initialization
                                          declaration order matters. Though the
                                          plugin does not warn about fields
                                          with obvious dependencies, its
                                          dependency analysis is necessarily
                                          incomplete; NPEs may result if some
                                          of its advice is followed.
                                        - Sometimes a field is annotated
                                          `@VisibleForTesting`. It may then be
                                          preferable not to reorder. The plugin
                                          does not current respect this
                                          annotation. -->
                                        <property name="ignoreModifiers" value="true" />
                                    </module>
                                    <module name="DefaultComesLast" />
                                    <module name="DesignForExtension" />
                                    <module name="EmptyBlock" />
                                    <module name="EmptyCatchBlock" />
                                    <module name="FinalClass" />
                                    <module name="HiddenFieldCheck">
                                        <property name="ignoreConstructorParameter" value="true" />
                                        <property name="ignoreSetter" value="true" />
                                    </module>
                                    <module name="IllegalImport">
                                        <!-- These packages are found in some
                                        of the dependencies declared above. -->
                                        <property name="illegalClasses" value="javax.xml.bind.DatatypeConverter" />
                                        <property name="illegalClasses" value="org.springframework.context.annotation.ComponentScan" />
                                        <property name="illegalPkgs" value="com.amazonaws.annotation" />
                                        <property name="illegalPkgs" value="com.beust.jcommander.internal" />
                                        <property name="illegalPkgs" value="com.google.api.client.repackaged" />
                                        <property name="illegalPkgs" value="com.newrelic.agent.deps" />
                                        <property name="illegalPkgs" value="jdk" />
                                        <property name="illegalPkgs" value="jersey.repackaged" />
                                        <property name="illegalPkgs" value="nl.jqno.equalsverifier.internal" />
                                        <property name="illegalPkgs" value="org.apache.commons.lang3">
                                            <!-- Please use Guava or a custom
                                            helper method instead. -->
                                        </property>
                                        <property name="illegalPkgs" value="org.immutables.value.internal" />
                                        <property name="illegalPkgs" value="org.mutabilitydetector.internal" />
                                    </module>
                                    <module name="IllegalImport">
                                        <!-- XXX: This config uses
                                        regexes so as to disallow static
                                        imports. Once `illegalClasses`
                                        disallows static imports by default,
                                        this config can be merged into the one
                                        above. See
                                        https://github.com/checkstyle/checkstyle/issues/4954. -->
                                        <property name="illegalClasses" value="org\.testng\.AssertJUnit(\..*?)?" />
                                        <property name="regexp" value="true" />
                                    </module>
                                    <module name="IllegalCatch" />
                                    <module name="IllegalThrows" />
                                    <module name="InnerAssignment" />
                                    <module name="MissingDeprecated" />
                                    <module name="MutableException" />
                                    <module name="NeedBraces" />
                                    <module name="NoClone" />
                                    <module name="NoFinalizer" />
                                    <module name="PackageDeclaration" />
                                    <module name="ParameterAssignment" />
                                    <module name="RedundantModifier" />
                                    <module name="SimplifyBooleanExpression" />
                                    <module name="SimplifyBooleanReturn" />
                                    <module name="TrailingComment" />
                                    <module name="WriteTag">
                                        <property name="tag" value="@author" />
                                        <property name="tagFormat" value="\S" />
                                        <property name="tagSeverity" value="error" />
                                        <property name="severity" value="ignore" />
                                    </module>
                                    <module name="UnnecessaryParentheses" />
                                    <module name="UnusedImports">
                                        <!-- Error-prone also detects these,
                                        but (currently) doesn't warn about
                                        JavaDoc-only imports. -->
                                    </module>
                                </module>
                            </module>
                        </checkstyleRules>
                        <failOnViolation>false</failOnViolation>
                        <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>${version.checkstyle}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.7.0</version>
                    <configuration>
                        <compilerArgs>
                            <!-- XXX: Here, we could pass
                            -J-XX:TieredStopAtLevel=1, like we do for most
                            other JVMs started during the build. But that
                            doesn't seem to yield a noticable speedup. -->
                        </compilerArgs>
                        <maxmem>256m</maxmem>
                        <parameters>true</parameters>
                        <source>${version.jdk}</source>
                        <target>${version.jdk}</target>
                        <!-- Erroneously inverted logic... for details, see
                        https://jira.codehaus.org/browse/MCOMPILER-209 -->
                        <useIncrementalCompilation>false</useIncrementalCompilation>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.0.2</version>
                    <configuration>
                        <ignoreDirect>false</ignoreDirect>
                        <ignoreNonCompile>true</ignoreNonCompile>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>3.0.0-M1</version>
                    <executions>
                        <execution>
                            <id>apply-enforcement-rules</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <fail>false</fail>
                        <rules>
                            <banDuplicatePomDependencyVersions />
                            <dependencyConvergence />
                            <requireJavaVersion>
                                <version>${version.jdk}</version>
                            </requireJavaVersion>
                            <requireMavenVersion>
                                <version>${version.maven}</version>
                            </requireMavenVersion>
                            <requirePluginVersions />
                            <requireSameVersionsReactor />
                            <requireUpperBoundDeps />
                        </rules>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>extra-enforcer-rules</artifactId>
                            <version>${version.extra-enforcer-rules}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>1.6</version>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <goals>
                                <goal>sign</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                    <executions>
                        <execution>
                            <id>create-test-jar</id>
                            <goals>
                                <goal>test-jar</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <skipIfEmpty>true</skipIfEmpty>
                        <archive>
                            <manifest>
                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                            </manifest>
                            <manifestEntries>
                                <Implementation-Title>${project.name}</Implementation-Title>
                                <Implementation-Vendor>${project.organization.name}</Implementation-Vendor>
                                <Implementation-Version>${project.version}.${build.number}.${build.revision}</Implementation-Version>
                            </manifestEntries>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${version.javadoc}</version>
                    <executions>
                        <execution>
                            <id>generate-javadoc-jar</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5.3</version>
                    <configuration>
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <releaseProfiles>release</releaseProfiles>
                        <tagNameFormat>v@{project.version}</tagNameFormat>
                        <useReleaseProfile>false</useReleaseProfile>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.1.0</version>
                    <configuration>
                        <delimiters>
                            <delimiter>@</delimiter>
                        </delimiters>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                    <executions>
                        <execution>
                            <id>generate-source-jar</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.surefire}</version>
                    <configuration>
                        <includes>
                            <include>**/*Test.java</include>
                        </includes>
                        <!-- Timing measurements indicate that it's not
                        beneficial to perform method-level parallelization for
                        unit tests. -->
                        <parallel>classes</parallel>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <threadCount>2</threadCount>
                        <trimStackTrace>false</trimStackTrace>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>buildnumber-maven-plugin</artifactId>
                    <version>1.4</version>
                    <executions>
                        <execution>
                            <id>determine-build-number</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>create</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <buildNumberPropertyName>build.revision</buildNumberPropertyName>
                        <revisionOnScmFailure>UNKNOWN</revisionOnScmFailure>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>tidy-maven-plugin</artifactId>
                    <version>1.0.0</version>
                </plugin>
                <plugin>
                    <groupId>org.eluder.coveralls</groupId>
                    <artifactId>coveralls-maven-plugin</artifactId>
                    <version>4.3.0</version>
                    <!-- XXX: This dependency declaration ensures JDK 9
                    compatibility. Drop it once
                    https://github.com/trautonen/coveralls-maven-plugin/issues/112
                    has been resolved and released. -->
                    <dependencies>
                        <dependency>
                            <groupId>javax.xml.bind</groupId>
                            <artifactId>jaxb-api</artifactId>
                            <version>2.3.0</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.gaul</groupId>
                    <artifactId>modernizer-maven-plugin</artifactId>
                    <version>1.6.0</version>
                    <executions>
                        <execution>
                            <id>modernize</id>
                            <phase>process-test-classes</phase>
                            <goals>
                                <goal>modernizer</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <failOnViolations>false</failOnViolations>
                        <javaVersion>${version.jdk}</javaVersion>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.8.1</version>
                </plugin>
                <plugin>
                    <groupId>org.pitest</groupId>
                    <artifactId>pitest-maven</artifactId>
                    <version>1.3.2</version>
                    <executions>
                        <execution>
                            <id>compute-mutation-coverage</id>
                            <goals>
                                <goal>mutationCoverage</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <mutators>
                            <mutator>ALL</mutator>
                        </mutators>
                        <testPlugin>testng</testPlugin>
                        <!-- Use multple threads to speed things up. Extend
                        timeouts to prevent false positives as a result of
                        contention. -->
                        <threads>4</threads>
                        <timeoutFactor>4</timeoutFactor>
                        <timestampedReports>false</timestampedReports>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>3.4.0.905</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- If explicitly enabled using `-Pcoverage` we use PIT to
            establish coverage through mutation testing. -->
            <id>coverage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-maven</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- If explicitly enabled using `-Pformat` the source code is
            formatted. -->
            <id>format</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.coveo</groupId>
                        <artifactId>fmt-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- By default we verify various aspects of a module and the
            artifact(s) it produces. We define these checks in a profile so
            that they can be disabled during development. -->
            <id>build-checks</id>
            <activation>
                <property>
                    <name>!verification.skip</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.lewisd</groupId>
                        <artifactId>lint-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>de.thetaphi</groupId>
                        <artifactId>forbiddenapis</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-testCompile</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>testCompile</goal>
                                </goals>
                                <configuration>
                                    <compilerArgs combine.children="append">
                                        <!-- Test code doesn't require Javadoc. -->
                                        <arg>-Xdoclint:-missing</arg>
                                    </compilerArgs>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <annotationProcessorPaths combine.children="append">
                                <path>
                                    <groupId>com.google.guava</groupId>
                                    <artifactId>guava-beta-checker</artifactId>
                                    <version>${version.guava-beta-checker}</version>
                                </path>
                                <path>
                                    <groupId>com.uber.nullaway</groupId>
                                    <artifactId>nullaway</artifactId>
                                    <version>${version.nullaway}</version>
                                </path>
                            </annotationProcessorPaths>
                            <compilerArgs combine.children="append">
                                <!-- We enable nearly all doclint checks,
                                except that we don't care about missing Javadoc
                                on non-public classes and members. -->
                                <arg>-Xdoclint:all</arg>
                                <arg>-Xdoclint:missing/protected</arg>
                                <arg>-Xlint:all</arg>
                                <!-- Not all annotations present on the
                                classpath are handled by annotation processors,
                                and javac complains about this. That doesn't
                                make a lot of sense. From time to time we
                                should review whether this issue has been
                                resolved. -->
                                <arg>-Xlint:-processing</arg>
                                <!-- We want to enable almost all error-prone
                                bug pattern checkers, so we enable all and then
                                selectively deactivate some. -->
                                <arg>-XepAllDisabledChecksAsWarnings</arg>
                                <!-- See https://github.com/google/error-prone/issues/655. -->
                                <arg>-Xep:ConstructorLeaksThis:OFF</arg>
                                <!-- See https://github.com/google/error-prone/issues/708. -->
                                <arg>-Xep:FieldMissingNullable:OFF</arg>
                                <arg>-XepOpt:NullAway:AnnotatedPackages=tech.picnic</arg>
                            </compilerArgs>
                            <compilerId>javac-with-errorprone</compilerId>
                            <forceJavacCompilerUse>true</forceJavacCompilerUse>
                            <showWarnings>true</showWarnings>
                        </configuration>
                        <dependencies>
                            <dependency>
                                <groupId>com.google.errorprone</groupId>
                                <artifactId>error_prone_core</artifactId>
                                <version>${version.error-prone}</version>
                            </dependency>
                            <dependency>
                                <groupId>org.codehaus.plexus</groupId>
                                <artifactId>plexus-compiler-api</artifactId>
                                <version>${version.plexus-compiler}</version>
                            </dependency>
                            <dependency>
                                <groupId>org.codehaus.plexus</groupId>
                                <artifactId>plexus-compiler-javac</artifactId>
                                <version>${version.plexus-compiler}</version>
                            </dependency>
                            <dependency>
                                <groupId>org.codehaus.plexus</groupId>
                                <artifactId>plexus-compiler-javac-errorprone</artifactId>
                                <version>${version.plexus-compiler}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>analyze-dependencies</id>
                                <phase>process-test-classes</phase>
                                <goals>
                                    <goal>analyze-dep-mgt</goal>
                                    <goal>analyze-duplicate</goal>
                                    <goal>analyze-only</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.gaul</groupId>
                        <artifactId>modernizer-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <!-- The `build-checks` profile enables a whole bunch of additional
            compile checks. By default those warnings break the build. This
            profile allows one to collect all build warnings without failing
            the build. -->
            <id>disallow-warnings</id>
            <activation>
                <property>
                    <name>!verification.warn</name>
                </property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>com.lewisd</groupId>
                            <artifactId>lint-maven-plugin</artifactId>
                            <configuration>
                                <failOnViolation>true</failOnViolation>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>de.thetaphi</groupId>
                            <artifactId>forbiddenapis</artifactId>
                            <configuration>
                                <failOnViolation>true</failOnViolation>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-checkstyle-plugin</artifactId>
                            <configuration>
                                <failOnViolation>true</failOnViolation>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <configuration>
                                <failOnWarning>true</failOnWarning>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-dependency-plugin</artifactId>
                            <configuration>
                                <failBuild>true</failBuild>
                                <failOnWarning>true</failOnWarning>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-enforcer-plugin</artifactId>
                            <configuration>
                                <fail>true</fail>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.gaul</groupId>
                            <artifactId>modernizer-maven-plugin</artifactId>
                            <configuration>
                                <failOnViolations>true</failOnViolations>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
        <profile>
            <!-- This profile is auto-activated when performing a release. -->
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                    </plugin>
                    <!-- Lexicographically this plugin is listed out-of-order
                    because it must be executed after the
                    `maven-javadoc-plugin`; otherwise not all artifacts will be
                    signed. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
